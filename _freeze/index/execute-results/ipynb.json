{
  "hash": "5acd5ee7bdbb2783dcb8374ff9324882",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Fine-Tuning Transformer Models for Classification of Digital Behavioural Data\nauthor:\n  - name:\n      given: Indira\n      family: Sen\n    affiliations:\n      - name: RWTH Aachen University\nbibliography: references.bib\ncsl: apa.csl\nformat:\n  html: default\n  ipynb: default\nexecute:\n  freeze: true\n  cache: true\n---\n\n## Learning Objectives\n\nBy the end of this tutorial, you will be able to fine-tune transformer models like BERT for binary and multiclass document classification. We show two options for using transformer models in Python\n\n- Simple Transformers\n- HuggingFace\n\nAs an example, we will fine-tune a specific transformer model (DistilBERT) for automatic sexism detection. \n\n## Target audience\n\nThis tutorial is aimed at social scientists with some knowledge in Python and supervised machine learning.\n\n## Setting up the computational environment\n\nThe following Python packages are required\n\n```python\n!pip install pandas numpy torch sklearn\n!pip install simpletransformers\n!pip install transformers[torch]\n```\n\nThis package is optional\n\n```python\n!pip install accelerate -U\n```\n\n## Duration\n\nIt depends on the hardware. This notebook can be used with or without GPU compute, but it's much faster if you do have a GPU.\n\n## Social Science Usecase(s)\n\nThis method has been used in @samory2021call for automatic sexism detection.\n\n## Import necessary Python libraries and modules\n\nWe will import necessary Python libraries and modules.\n\n::: {#3e7cb2e4 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# For deep learning\nimport torch\n```\n:::\n\n\nWe then check if have a GPU available. This is important because some parts of the code have to be modified later on based on this.\n\n::: {#76eeff2d .cell execution_count=3}\n``` {.python .cell-code}\ngpu_avail = torch.cuda.is_available()\ngpu_avail\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nTrue\n```\n:::\n:::\n\n\n## Get the data\n\nWe first download the datasets we need for finetuning our models. This is a **supervised** classification task, therefore, we will need labeled data. We download the the 'Call me sexist but' (CMSB) dataset which you can find here: [https://search.gesis.org/research_data/SDN-10.7802-2251](https://search.gesis.org/research_data/SDN-10.7802-2251) This dataset is from our paper on detecting sexism in a theory-driven manner [@samory2021call].\n\nHere, we can download the full data ('sexism\\_data.csv') and put it in folder called 'sexism_data' in the same location as our jupyter notebook. Here, we will use just a subset of the data for demonstration.\n\n::: {#3d254c00 .cell execution_count=4}\n``` {.python .cell-code}\n## sexism_data = pd.read_csv('sexism_data/sexism_data.csv')\n\nsexism_data = pd.read_csv('sexism_data/sexism_sample.csv')\n\nsexism_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>dataset</th>\n      <th>text</th>\n      <th>toxicity</th>\n      <th>sexist</th>\n      <th>of_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10330</td>\n      <td>other</td>\n      <td>MENTION3839 MENTION2475 would have to see what...</td>\n      <td>0.203880</td>\n      <td>False</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5703</td>\n      <td>callme</td>\n      <td>I hate it when women beat up men in movies!</td>\n      <td>0.661064</td>\n      <td>True</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12331</td>\n      <td>scales</td>\n      <td>Men are better at science and math than women are</td>\n      <td>0.531301</td>\n      <td>True</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12855</td>\n      <td>callme</td>\n      <td>\"MENTION149: MENTION2551 ps I'd never listen t...</td>\n      <td>0.278660</td>\n      <td>False</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2240</td>\n      <td>other</td>\n      <td>MENTION279 Vivek W is the Carrot Top of academ...</td>\n      <td>0.084303</td>\n      <td>False</td>\n      <td>-1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6b264754 .cell execution_count=5}\n``` {.python .cell-code}\nsexism_data = sexism_data.dropna(subset = 'sexist')\n```\n:::\n\n\n## Finetuning a classifier: the general procedure\n\n### With `simpletransformers`\n\nWe first use the [`simpletransformers`](https://simpletransformers.ai/) package which is more beginner-friendly. The basic steps for finetuning a classifier using simpletrasnformers are:\n\n- Initialize a model based on a specific architechture (BERT, DistilBERT, etc)\n- Train the model with train_model()\n- Evaluate the model with eval_model()\n- Make predictions on (unlabelled) data with predict()\n\n::: {#82812b75 .cell execution_count=6}\n``` {.python .cell-code}\nfrom simpletransformers.classification import ClassificationModel, ClassificationArgs\nimport logging\n```\n:::\n\n\n::: {#93cf1faf .cell execution_count=7}\n``` {.python .cell-code}\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)\n```\n:::\n\n\nWe need to preprocess the data first before we start the finetuning process. In this step, we split the dataset into **train** and **test** sets to have a fully held-out test set that can be used to evaluate our classifier.\n\nWe can also create a **validation** that is used during the fine tuning process for hyperparameter tuning, but that is not mandatory.\n\n::: {#d9af320f .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\n\ntrain_df, test_df = train_test_split(sexism_data, stratify=sexism_data['sexist'], test_size=0.2)\n```\n:::\n\n\nWe now convert the dataframes into a format that can be read by simpletransformers. This is a dataframe with the columns 'text' and 'labels'. The 'labels' column should be numerical, so we use **one-hot encoding** to transform our boolean sexist labels to numerical ones.\n\n::: {#f2976bd6 .cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train_df['sexist'])\ntrain_df['labels'] = le.transform(train_df['sexist'])\ntest_df['labels'] = le.transform(test_df['sexist'])\n```\n:::\n\n\n::: {#177b0f5f .cell execution_count=10}\n``` {.python .cell-code}\n# to see which number was mapped to which class:\nlist(le.inverse_transform([0,1]))\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n[False, True]\n```\n:::\n:::\n\n\nSo, 0 is non-sexist and 1 is sexist. We now have the appropriate data structure.\n\nThe next step is setting the training parameters and loading the classification model, in this case, DistilBERT [@sanh2019distilbert], a lightweight model that can be trained relatively quickly compared to other transformer variants like BERT and RoBERTa.\n\nFor training parameters, we have many to choose from such as the learning rate, whether we want to stop early or not, where we should save the model, and more. You can find all of them [here](https://simpletransformers.ai/docs/usage/#configuring-a-simple-transformers-model).\n\nAs a minimal setup, we will just set the number of **epochs**, i.e., the number of passes the model does over the full training set. For recent transformer models, epochs are usually set to 2 or 3, after which overfitting may happen.\n\n**use_cuda** is a parameter that signals whether the GPU should be used or not. It will be set based on our check earlier.\n\n::: {#243def3c .cell execution_count=11}\n``` {.python .cell-code}\n# Optional model configuration\nmodel_args = ClassificationArgs(num_train_epochs=3, overwrite_output_dir=True)\n\n# Create a ClassificationModel\nmodel = ClassificationModel(\n    \"distilbert\", \"distilbert-base-uncased\", args=model_args, use_cuda=gpu_avail,\n)\n\n# we set some additional parameters when using a GPU\nif gpu_avail:\n    model_args.use_multiprocessing=False\n    model_args.use_multiprocessing_for_evaluation=False\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/chainsawriot/miniconda/envs/sexism/lib/python3.11/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n```\n:::\n:::\n\n\nWe are now finally ready to begin training! This might take a while, especially when we're not using a GPU.\n\n::: {#50754d8f .cell execution_count=12}\n``` {.python .cell-code}\n# Train the model\nmodel.train_model(train_df)\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"f75c01be12124e7fab37280522ad6eec\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"48419e9627e84aa2847b09b90620d87a\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"d8dd18374102430481864e5e23b8a766\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"07c16901c3eb4e0f813b95760ac8e633\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n(60, 0.37863693237304685)\n```\n:::\n:::\n\n\nAfter training our model, we can use it to make predictions for unlabeled datapoints to classify whether they are sexist or not.\n\n::: {#fd7ad90c .cell execution_count=13}\n``` {.python .cell-code}\nsexist_tweet = \"A woman will never be truly fulfilled in life if she doesn’t have a committed long-term relationship with a man\"\npredictions, raw_outputs = model.predict([sexist_tweet])\nle.inverse_transform(predictions)\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"86665d3628ef4f648e507b7ebedd0acc\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([ True])\n```\n:::\n:::\n\n\n::: {#3e51a299 .cell execution_count=14}\n``` {.python .cell-code}\nnonsexist_tweet = \"International Women's Day (IWD) is a holiday celebrated annually on March 8 as a focal point in the women's rights movement.\"\npredictions, raw_outputs = model.predict([nonsexist_tweet])\nle.inverse_transform(predictions)\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"de9285ac172348238c0dd4e93426304a\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray([ True])\n```\n:::\n:::\n\n\nWe can also use the held-out test set to quantitatively evaluate our model.\n\n::: {#c5c60097 .cell execution_count=15}\n``` {.python .cell-code}\n# Evaluate the model\nresult, model_outputs, wrong_predictions = model.eval_model(test_df)\nresult\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"5730c1f8fd334e64b49e6f4b856f5365\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n{'mcc': 0.7585826061362605,\n 'accuracy': 0.875,\n 'f1_score': 0.8837209302325582,\n 'tp': 19,\n 'tn': 16,\n 'fp': 4,\n 'fn': 1,\n 'auroc': 0.9525,\n 'auprc': 0.9549421969051126,\n 'eval_loss': 0.31277695298194885}\n```\n:::\n:::\n\n\n::: {#1f25c873 .cell execution_count=16}\n``` {.python .cell-code}\n# you can also use sklearn's neat classification report to get more metrics\nfrom sklearn.metrics import classification_report\n\npreds, _ = model.predict(list(test_df['text'].values))\n# preds = le.inverse_transform(preds)\n\nprint(classification_report(test_df['labels'], preds))\n```\n\n::: {.cell-output .cell-output-display}\n```{.json}\n{\"model_id\":\"a32ef290a3354147b4d3fecfb7581df8\",\"version_major\":2,\"version_minor\":0,\"quarto_mimetype\":\"application/vnd.jupyter.widget-view+json\"}\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n              precision    recall  f1-score   support\n\n           0       0.94      0.80      0.86        20\n           1       0.83      0.95      0.88        20\n\n    accuracy                           0.88        40\n   macro avg       0.88      0.88      0.87        40\nweighted avg       0.88      0.88      0.87        40\n\n```\n:::\n:::\n\n\n## Conclusion\n\nThat's a wrap on fine-tuning your own transformer models for text classification. You can replace the sexism dataset with any other labeled dataset of your choice for a particular task to train a classifier for that task. More further reading and examples, see:\n\n- [https://www.aiforhumanists.com/tutorials/](https://www.aiforhumanists.com/tutorials/)\n- [https://huggingface.co/docs/transformers/en/training](https://huggingface.co/docs/transformers/en/training)\n\n### With HuggingFace `transformers`\n\nWe now repeat the same process with the HuggingFace [`transformers` Python library](https://huggingface.co/transformers/installation.html). Additionally, we also use the [accelerate library](https://huggingface.co/docs/accelerate/index), which helps make our code more efficient. \nWe will again use DistilBERT.\n\n::: {#c2a00896 .cell execution_count=17}\n``` {.python .cell-code}\nfrom transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification\nfrom transformers import Trainer, TrainingArguments\n```\n:::\n\n\nWe will set some of the configurations, including whether to use a GPU or not.\n\n::: {#9a85f26d .cell execution_count=18}\n``` {.python .cell-code}\nmodel_name = 'distilbert-base-uncased'\nif gpu_avail:\n    device_name = 'cuda'\nelse:\n    device_name = 'cpu'\n\n# This is the maximum number of tokens in any document; the rest will be truncated.\nmax_length = 512\n\n# This is the name of the directory where we'll save our model. You can name it whatever you want.\ncached_model_directory_name = 'output_hf'\n```\n:::\n\n\nWe will reuse the train-test splits we created for simpletransformers, but change the data structure slightly.\n\n::: {#43fc8c2c .cell execution_count=19}\n``` {.python .cell-code}\ntrain_texts = train_df['text'].values\ntrain_labels = train_df['labels'].values\n\ntest_texts = test_df['text'].values\ntest_labels = test_df['labels'].values\n```\n:::\n\n\nCompared to simpletransformers, we get a closer look at what happens 'under the hood' with huggingface. We will see the transformation of the text better --- each tweet will be truncated if they're more than 512 tokens or padded if they're fewer than 512 tokens.\n\nThe tokens will be separated into \"word pieces\" using the transformers tokenizers ('DistilBertTokenizerFast' in this case to match the DistiBERT model). And some special tokens will also be added such as **CLS** (start token of every tweet) and **SEP** (separator between each sentence {not tweet}):\n\n::: {#8008478f .cell execution_count=20}\n``` {.python .cell-code}\ntokenizer = DistilBertTokenizerFast.from_pretrained(model_name)\n```\n:::\n\n\nWe now encode our texts using the tokenizer.\n\n::: {#f2e89764 .cell execution_count=21}\n``` {.python .cell-code}\nfrom datasets import Dataset\n\ntrain_df = Dataset.from_pandas(train_df)\ntest_df = Dataset.from_pandas(test_df)\n\ndef tokenize_function(examples):\n    return tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True)\n\n\ntokenized_train_df = train_df.map(tokenize_function, batched=True)\ntokenized_test_df = test_df.map(tokenize_function, batched=True)\n```\n:::\n\n\nWe now load the DistilBERT model and specify that it should use the GPU.\n\n::: {#cfd847de .cell execution_count=22}\n``` {.python .cell-code}\nmodel = DistilBertForSequenceClassification.from_pretrained(model_name, num_labels=len(le.classes_)).to()\n```\n:::\n\n\nAs we did with simpletransformers, we now set the training parameters, i.e., the number of epochs.\n\n::: {#c70a8de6 .cell execution_count=23}\n``` {.python .cell-code}\nimport accelerate\n```\n:::\n\n\n::: {#eb12a073 .cell execution_count=24}\n``` {.python .cell-code}\ntraining_args = TrainingArguments(\n    num_train_epochs=3,              # total number of training epochs\n    output_dir='./results',          # output directory\n    report_to='none'\n)\n```\n:::\n\n\n#### Fine-tune the DistilBERT model\n\nFirst, we define a custom evaluation function that returns the accuracy. You could modify this function to return precision, recall, F1, and/or other metrics.\n\n::: {#afa73819 .cell execution_count=25}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score\ndef compute_metrics(pred):\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    acc = accuracy_score(labels, preds)\n    return {\n        'accuracy': acc,\n  }\n```\n:::\n\n\nThen we create a HuggingFace `Trainer` object using the `TrainingArguments` object that we created above. We also send our `compute_metrics` function to the `Trainer` object, along with our test and train datasets.\n\n::: {#0a1d4d49 .cell execution_count=26}\n``` {.python .cell-code}\ntrainer = Trainer(\n    model=model,                         # the instantiated 🤗 Transformers model to be trained\n    args=training_args,                  # training arguments, defined above\n    train_dataset=tokenized_train_df,         # training dataset\n    compute_metrics=compute_metrics      # our custom evaluation function\n)\n```\n:::\n\n\nTime to finally fine-tune!\n\n::: {#77e06144 .cell execution_count=27}\n``` {.python .cell-code}\ntrainer.train()\n```\n:::\n\n\n#### Save fine-tuned model\n\nThe following cell will save the model and its configuration files to a directory in Colab. To preserve this model for future use, you should download the model to your computer.\n\n::: {#dfbf2586 .cell execution_count=28}\n``` {.python .cell-code}\ntrainer.save_model(cached_model_directory_name)\n```\n:::\n\n\n(Optional) If you've already fine-tuned and saved the model, you can reload it using the following line. You don't have to run fine-tuning every time you want to evaluate.\n\n::: {#fb496576 .cell execution_count=29}\n``` {.python .cell-code}\n# trainer = DistilBertForSequenceClassification.from_pretrained(cached_model_directory_name)\n```\n:::\n\n\nWe can now evaluate the model by predicting the labels for the test set.\n\n::: {#544a1136 .cell execution_count=30}\n``` {.python .cell-code}\npredicted_results = trainer.predict(tokenized_test_df)\n```\n:::\n\n\n::: {#82e7dbdd .cell execution_count=31}\n``` {.python .cell-code}\npredicted_labels = predicted_results.predictions.argmax(-1) # Get the highest probability prediction\npredicted_labels = predicted_labels.flatten().tolist()      # Flatten the predictions into a 1D list\npredicted_labels[0:5]\n```\n:::\n\n\n::: {#928b7684 .cell execution_count=32}\n``` {.python .cell-code}\nprint(classification_report(tokenized_test_df['labels'],\n                            predicted_labels))\n```\n:::\n\n\nYou can now use this classifier on other types of data to label it for potentially sexist content.\n\n## Multi-class classification\n\nIn the previous parts, we finetuned a binary classifier for differentiating sexist vs. non-sexist content. However, the CMSB dataset has fine-grained labels for sexism based on **content** and **phrasing**.\n\nSo we now use a multi-class classifier using simpletransformers, with a few tweaks to our earlier code.  \n\nBut first, we have to aggregate the annotations from all crowdworkers to obtain the content and phrasing labels. For simplicity, we will use the majority label (breaking ties randomly).\n\n::: {#e4f38bba .cell execution_count=33}\n``` {.python .cell-code}\nsexism_data_annotations = pd.read_csv('sexism_data/all_data_annotations.csv', sep = '\\t')\nsexism_data_annotations.head()\n```\n:::\n\n\n::: {#0e2297d3 .cell execution_count=34}\n``` {.python .cell-code}\ntweets = sexism_data_annotations['_id'].unique()\n```\n:::\n\n\n::: {#c0eaeda3 .cell execution_count=35}\n``` {.python .cell-code}\nfrom collections import Counter\n\ncontent_labels = []\nphrasing_labels = []\n\nfor tweet in tweets:\n    data_subset = sexism_data_annotations[sexism_data_annotations['_id'] == tweet]\n    content_labels.append(Counter(data_subset['content'].values).most_common()[0][0]) # get the majority label for content\n    phrasing_labels.append(Counter(data_subset['phrasing']).most_common()[0][0]) # get the majority label for phrasing\n```\n:::\n\n\n::: {#d8e7dff7 .cell execution_count=36}\n``` {.python .cell-code}\nfinegrained_sexism_data = pd.DataFrame([tweets, content_labels, phrasing_labels]).T\nfinegrained_sexism_data.columns = ['_id', 'content_label', 'phrasing_label']\nfinegrained_sexism_data\n```\n:::\n\n\n::: {#08bae683 .cell execution_count=37}\n``` {.python .cell-code}\nfinegrained_sexism_data.groupby('content_label').size()\n```\n:::\n\n\n::: {#fe685794 .cell execution_count=38}\n``` {.python .cell-code}\nfinegrained_sexism_data.groupby('phrasing_label').size()\n```\n:::\n\n\nThe six content and three phrasing categories are:\n\n![](img/img1.png)\n\nLet's join this data with the tweets data from 'all_data.csv'\n\n::: {#79a3429c .cell execution_count=39}\n``` {.python .cell-code}\nfinegrained_sexism_data = pd.merge(finegrained_sexism_data, sexism_data[['_id', 'text', 'sexist']])\n```\n:::\n\n\n::: {#5efd9654 .cell execution_count=40}\n``` {.python .cell-code}\nfinegrained_sexism_data.groupby(['content_label']).size()\n```\n:::\n\n\nSince our dataset is somewhat imbalanced with low representation for some categories, we can restrict it to only those classes that have at least 300 instances, i.e., 1, 2, and 6.\n\n::: {#d70f383c .cell execution_count=41}\n``` {.python .cell-code}\nfinegrained_sexism_data = finegrained_sexism_data[finegrained_sexism_data['content_label'].isin([1, 2, 6])]\n\n# we also change the label range for simpletransformers, making them range from 0 to 2.\nlabel_map = {1 : 0,\n             2 : 1,\n             6 : 2}\nfinegrained_sexism_data['content_label'] = [label_map[i] for i in finegrained_sexism_data['content_label']]\nfinegrained_sexism_data.groupby(['content_label']).size()\n```\n:::\n\n\nLet's train a classifier for identifying sexist content or phrasing\n\n::: {#b9c41c55 .cell execution_count=42}\n``` {.python .cell-code}\ncategory = 'content_label'\n```\n:::\n\n\n::: {#899b1240 .cell execution_count=43}\n``` {.python .cell-code}\nmulti_train_df, multi_test_df = train_test_split(finegrained_sexism_data,\n                                                 stratify=finegrained_sexism_data[category],\n                                                 test_size=0.2)\n```\n:::\n\n\nYou have the add the number of labels to the model initialization.\n\n::: {#b525b8be .cell execution_count=44}\n``` {.python .cell-code}\n# Optional model configuration\nmodel_args = ClassificationArgs(num_train_epochs=5,\n                                output_dir='output_st',\n                                overwrite_output_dir=True)\n\n# Create a ClassificationModel\nmodel = ClassificationModel(\n    \"distilbert\", \"distilbert-base-uncased\", num_labels=len(finegrained_sexism_data[category].unique()),\n    use_cuda=gpu_avail,\n    args=model_args\n)\n\n\n# we set some additional parameters when using a GPU\nif gpu_avail:\n    model_args.use_multiprocessing=False\n    model_args.use_multiprocessing_for_evaluation=False\n```\n:::\n\n\n::: {#da7707ae .cell execution_count=45}\n``` {.python .cell-code}\n# multi_train_df['content_label'] = [i-1 for i in multi_train_df['content_label']]\n# multi_test_df['content_label'] = [i-1 for i in multi_test_df['content_label']]\n```\n:::\n\n\n::: {#7e9b8335 .cell execution_count=46}\n``` {.python .cell-code}\nmulti_train_df = multi_train_df[['text', category]]\nmulti_test_df = multi_test_df[['text', category]]\n```\n:::\n\n\n::: {#330b942c .cell execution_count=47}\n``` {.python .cell-code}\n# Train the model.\nmodel.train_model(multi_train_df)\n```\n:::\n\n\n::: {#f283c43f .cell execution_count=48}\n``` {.python .cell-code}\npredictions, raw_outputs = model.predict([sexist_tweet])\npredictions\n```\n:::\n\n\n::: {#1d0579da .cell execution_count=49}\n``` {.python .cell-code}\npreds, _ = model.predict(list(multi_test_df['text'].values))\n```\n:::\n\n\n::: {#3328ec80 .cell execution_count=50}\n``` {.python .cell-code}\nprint(classification_report(multi_test_df[category], preds))\n```\n:::\n\n\nWe can see that the model performs worse than binary sexism classification, but still better than a random chance model which would have add an accuracy of 0.3 as we have three classes.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n  widgets: \n---\n",
    "supporting": [
      "index_files/figure-ipynb"
    ],
    "filters": []
  }
}